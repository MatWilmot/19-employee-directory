{"version":3,"sources":["components/Header.js","components/EmployeeDisplay.js","components/DisplayContainer.js","components/SideBar.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","EmployeeDisplay","props","list","map","element","index","key","style","width","src","picture","large","alt","name","first","last","email","phone","location","city","state","DisplayContainer","children","SideBar","type","id","value","onChange","sort","htmlFor","defaultChecked","filter","placeholder","search","App","useState","setList","modList","setModList","useEffect","Promise","resolve","reject","axios","method","url","then","response","data","results","catch","error","res","console","log","e","target","sortedF","a","b","sortedL","filtered","searchResults","includes","push","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6f827714.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n  return (\n    <div className=\"jumbotron jumbotron-fluid text-center\">\n      <h1 className=\"display-4\">Employee Directory</h1>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst EmployeeDisplay = (props) => {\n  return (\n    <div className=\"col-md-9\">\n      <div className=\"row row-cols-lg-2 row-cols-md-1\">\n        {props.list.map((element, index) => (\n          <div key={index} className=\"col mb-4\">\n            <div className=\"card h-100\" style={{ width: \"22rem\" }}>\n              <img\n                src={element.picture.large}\n                className=\"card-img-top\"\n                alt=\"randomly generated user\"\n              />\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">\n                  {element.name.first + \" \" + element.name.last}\n                </h5>\n                <p className=\"card-text\">Email: {element.email}</p>\n                <p className=\"card-text\">Phone: {element.phone}</p>\n                <p className=\"card-text\">\n                  From: {element.location.city}, {element.location.state}\n                </p>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default EmployeeDisplay;\n","import React from \"react\";\n\nconst DisplayContainer = (props) => {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">{props.children}</div>\n    </div>\n  );\n};\n\nexport default DisplayContainer;\n","import React from \"react\";\n\nconst SideBar = (props) => {\n  return (\n    <div className=\"col-md-3\">\n      <h1>Options</h1>\n      <br />\n      <form>\n        <h4>Sort:</h4>\n\n        <fieldset className=\"form-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-10\">\n              <div className=\"form-check\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"radio\"\n                  name=\"gridRadios\"\n                  id=\"gridRadios1\"\n                  value=\"first\"\n                  onChange={props.sort}\n                />\n                <label className=\"form-check-label\" htmlFor=\"gridRadios1\">\n                  First Name (A-Z)\n                </label>\n              </div>\n              <div className=\"form-check\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"radio\"\n                  name=\"gridRadios\"\n                  id=\"gridRadios2\"\n                  value=\"last\"\n                  onChange={props.sort}\n                />\n                <label className=\"form-check-label\" htmlFor=\"gridRadios2\">\n                  Second Name (A-Z)\n                </label>\n              </div>\n              <div className=\"form-check\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"radio\"\n                  name=\"gridRadios\"\n                  id=\"gridRadios2\"\n                  value=\"none\"\n                  defaultChecked\n                  onChange={props.sort}\n                />\n                <label className=\"form-check-label\" htmlFor=\"gridRadios2\">\n                  None\n                </label>\n              </div>\n            </div>\n          </div>\n        </fieldset>\n\n        <br />\n        <h4>Filter:</h4>\n        <div className=\"form-group\">\n          <label htmlFor=\"inputState\">State</label>\n          <select\n            id=\"inputState\"\n            className=\"form-control\"\n            onChange={props.filter}\n          >\n            <option>None</option>\n            <option>Alabama</option>\n            <option>Alaska</option>\n            <option>Arizona</option>\n            <option>Arkansas</option>\n            <option>California</option>\n            <option>Colorado</option>\n            <option>Connecticut</option>\n            <option>Delaware</option>\n            <option>Florida</option>\n            <option>Georgia</option>\n            <option>Hawaii</option>\n            <option>Idaho</option>\n            <option>Illinois</option>\n            <option>Indiana</option>\n            <option>Iowa</option>\n            <option>Kansas</option>\n            <option>Kentucky</option>\n            <option>Louisiana</option>\n            <option>Maine</option>\n            <option>Maryland</option>\n            <option>Massachusetts</option>\n            <option>Michigan</option>\n            <option>Minnesota</option>\n            <option>Mississippi</option>\n            <option>Missouri</option>\n            <option>Montana</option>\n            <option>Nebraska</option>\n            <option>Nevada</option>\n            <option>New Hampshire</option>\n            <option>New Jersey</option>\n            <option>New Mexico</option>\n            <option>New York</option>\n            <option>North Carolina</option>\n            <option>North Dakota</option>\n            <option>Ohio</option>\n            <option>Oklahoma</option>\n            <option>Oregon</option>\n            <option>Pennsylvania</option>\n            <option>Rhode Island</option>\n            <option>South Carolina</option>\n            <option>South Dakota</option>\n            <option>Tennessee</option>\n            <option>Texas</option>\n            <option>Utah</option>\n            <option>Vermont</option>\n            <option>Virginia</option>\n            <option>Washington</option>\n            <option>West Virginia</option>\n            <option>Wisconsin</option>\n            <option>Wyoming</option>\n          </select>\n        </div>\n        <br />\n        <h4>Search:</h4>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          id=\"search\"\n          placeholder=\"Type something\"\n          onChange={props.search}\n        />\n        <small className=\"form-text text-muted\">Case Sensitive</small>\n      </form>\n    </div>\n  );\n};\n\nexport default SideBar;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport EmployeeDisplay from \"./components/EmployeeDisplay\";\nimport axios from \"axios\";\nimport DisplayContainer from \"./components/DisplayContainer\";\nimport SideBar from \"./components/SideBar\";\n\nfunction App() {\n  const [list, setList] = useState([]);\n  const [modList, setModList] = useState([]);\n\n  const getEmployees = () => {\n    return new Promise((resolve, reject) => {\n      axios({\n        method: \"GET\",\n        url: \"https://randomuser.me/api/?results=10&nat=us\",\n      })\n        .then((response) => {\n          resolve(response.data.results);\n        })\n        .catch((error) => reject(error));\n    });\n  };\n\n  useEffect(() => {\n    getEmployees()\n      .then((res) => {\n        setList(res);\n        setModList(res);\n      })\n      .catch((error) => console.log(error));\n  }, []);\n\n  // running this function (by sorting either first or last) gets you a console.log\n  // of the *sorted* array\n  const sort = (e) => {\n    switch (e.target.value) {\n      case \"first\":\n        const sortedF = [...list].sort(function (a, b) {\n          if (a.name.first < b.name.first) {\n            return -1;\n          }\n          if (a.name.first > b.name.first) {\n            return 1;\n          }\n          return 0;\n        });\n        console.log(\"sorted:\", sortedF);\n        setModList([...sortedF]);\n        break;\n\n      case \"last\":\n        const sortedL = [...list].sort(function (a, b) {\n          if (a.name.last < b.name.last) {\n            return -1;\n          }\n          if (a.name.last > b.name.last) {\n            return 1;\n          }\n          return 0;\n        });\n        console.log(\"sorted:\", sortedL);\n        setModList([...sortedL]);\n        break;\n\n      case \"none\":\n        setModList([...list]);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  // running this function (by changing the \"state\" filter) shows the original array\n  // this should never change the order in which the information is displayed\n  const filter = (e) => {\n    if (e.target.value !== \"None\") {\n      const filtered = list.filter(\n        (element) => element.location.state === e.target.value\n      );\n      setModList([...filtered]);\n    } else {\n      setModList([...list]);\n    }\n  };\n\n  const search = (e) => {\n    let searchResults = [];\n    [...list].map((element) => {\n      if (\n        element.name.first.includes(e.target.value) ||\n        element.name.last.includes(e.target.value) ||\n        element.location.city.includes(e.target.value) ||\n        element.location.state.includes(e.target.value) ||\n        element.email.includes(e.target.value) ||\n        element.phone.includes(e.target.value)\n      ) {\n        console.log(\"Matching Entry:\", element);\n        searchResults.push(element);\n        console.log(\"Result Array\", searchResults);\n        setModList([...searchResults]);\n      } else {\n        console.log(\"No Results Found!\");\n        setModList([...searchResults]);\n      }\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <DisplayContainer>\n        <SideBar sort={sort} filter={filter} search={search} />\n        <EmployeeDisplay list={modList} />\n      </DisplayContainer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}